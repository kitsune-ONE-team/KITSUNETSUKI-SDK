diff --git a/makepanda/makepanda.py b/makepanda/makepanda.py
index 44e3c84717..51ed07b786 100755
--- a/makepanda/makepanda.py
+++ b/makepanda/makepanda.py
@@ -970,6 +970,7 @@ if (COMPILER=="GCC"):
             SmartPkgEnable("CGGL", "", ("CgGL"), "Cg/cgGL.h", thirdparty_dir = "nvidiacg")
         if GetTarget() != "android":
             SmartPkgEnable("X11", "x11", "X11", ("X11", "X11/Xlib.h", "X11/XKBlib.h"))
+            SmartPkgEnable("XRENDER", "xrender", "Xrender", ("X11", "X11/extensions/Xrender.h"))
         else:
             PkgDisable("X11")
 
@@ -3837,12 +3838,12 @@ TargetAdd('libp3device.in', opts=['IMOD:panda3d.core', 'ILIB:libp3device', 'SRCD
 # DIRECTORY: panda/src/display/
 #
 
-OPTS=['DIR:panda/src/display', 'BUILDING:PANDA', 'X11']
+OPTS=['DIR:panda/src/display', 'BUILDING:PANDA', 'X11', 'XRENDER']
 TargetAdd('p3display_graphicsStateGuardian.obj', opts=OPTS, input='graphicsStateGuardian.cxx')
 TargetAdd('p3display_composite1.obj', opts=OPTS, input='p3display_composite1.cxx')
 TargetAdd('p3display_composite2.obj', opts=OPTS, input='p3display_composite2.cxx')
 
-OPTS=['DIR:panda/src/display', 'X11']
+OPTS=['DIR:panda/src/display', 'X11', 'XRENDER']
 IGATEFILES=GetDirectoryContents('panda/src/display', ["*.h", "*_composite*.cxx"])
 IGATEFILES.remove("renderBuffer.h")
 TargetAdd('libp3display.in', opts=OPTS, input=IGATEFILES)
@@ -4569,7 +4570,7 @@ if not PkgSkip("EGG"):
 #
 
 if GetTarget() not in ['windows', 'darwin'] and not PkgSkip("X11"):
-    OPTS=['DIR:panda/src/x11display', 'BUILDING:PANDAX11', 'X11']
+    OPTS=['DIR:panda/src/x11display', 'BUILDING:PANDAX11', 'X11', 'XRENDER']
     TargetAdd('p3x11display_composite1.obj', opts=OPTS, input='p3x11display_composite1.cxx')
 
 #
@@ -4588,7 +4589,7 @@ if GetTarget() not in ['windows', 'darwin'] and not PkgSkip("GL") and not PkgSki
     TargetAdd('libpandagl.dll', input='p3glgsg_glgsg.obj')
     TargetAdd('libpandagl.dll', input='p3glxdisplay_composite1.obj')
     TargetAdd('libpandagl.dll', input=COMMON_PANDA_LIBS)
-    TargetAdd('libpandagl.dll', opts=['MODULE', 'GL', 'NVIDIACG', 'CGGL', 'X11'])
+    TargetAdd('libpandagl.dll', opts=['MODULE', 'GL', 'NVIDIACG', 'CGGL', 'X11', 'XRENDER'])
 
 #
 # DIRECTORY: panda/src/cocoadisplay/
diff --git a/panda/src/display/get_x11.h b/panda/src/display/get_x11.h
index 57ca5cf44e..12194f394d 100644
--- a/panda/src/display/get_x11.h
+++ b/panda/src/display/get_x11.h
@@ -50,6 +50,7 @@ struct XVisualInfo;
 #include <X11/Xutil.h>
 #include <X11/keysym.h>
 #include <X11/Xatom.h>
+#include <X11/extensions/Xrender.h>
 #include "post_x11_include.h"
 
 #endif  // CPPPARSER
diff --git a/panda/src/glxdisplay/glxGraphicsStateGuardian.cxx b/panda/src/glxdisplay/glxGraphicsStateGuardian.cxx
index 83ea5f2b2f..c53afb7093 100644
--- a/panda/src/glxdisplay/glxGraphicsStateGuardian.cxx
+++ b/panda/src/glxdisplay/glxGraphicsStateGuardian.cxx
@@ -303,6 +303,8 @@ choose_pixel_format(const FrameBufferProperties &properties,
   GLXFBConfig *configs =
     _glXChooseFBConfig(_display, _screen, attrib_list, &num_configs);
 
+  bool need_alpha = properties.get_alpha_bits() != 0;
+
   if (configs != nullptr) {
     bool context_has_pbuffer, context_has_pixmap, slow;
     int quality, i;
@@ -327,6 +329,18 @@ choose_pixel_format(const FrameBufferProperties &properties,
         continue;
       }
 
+      if (need_alpha) {
+        _visuals = _glXGetVisualFromFBConfig(_display, configs[i]);
+        if (!_visuals) continue;
+
+        XRenderPictFormat* pict_format = XRenderFindVisualFormat(_display, _visuals->visual);
+        if (!pict_format) continue;
+        if (pict_format->direct.alphaMask == 0) continue;
+
+        XFree(_visuals);
+        _visuals = nullptr;
+      }
+
       if (quality > best_quality) {
         best_quality = quality;
         best_result = i;
