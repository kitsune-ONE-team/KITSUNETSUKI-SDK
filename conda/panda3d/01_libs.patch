diff --git a/makepanda/makepandacore.py b/makepanda/makepandacore.py
index ad75ae6f1d..0599899d6f 100644
--- a/makepanda/makepandacore.py
+++ b/makepanda/makepandacore.py
@@ -524,6 +524,10 @@ def GetBison():
     if BISON is not None:
         return BISON
 
+    if "BISON" in os.environ:
+        BISON = os.environ["BISON"]
+        return BISON
+
     # We now require a newer version of Bison than the one we previously
     # shipped in the win-util dir.  The new version has a 'data'
     # subdirectory, so check for that.
@@ -1810,22 +1814,23 @@ def SmartPkgEnable(pkg, pkgconfig = None, libs = None, incs = None, defs = None,
             if l.startswith("lib"):
                 libname = l[3:]
 
-            location = LocateLibrary(libname, lpath, prefer_static=True)
-            if location is not None:
-                # If it's a .so or .dylib we may have changed it and copied it to the built/lib dir.
-                if location.endswith('.so') or location.endswith('.dylib'):
-                    location = os.path.join(GetOutputDir(), "lib", os.path.basename(location))
-                LibName(target_pkg, location)
-            else:
-                # This is for backward compatibility - in the thirdparty dir,
-                # we kept some libs with "panda" prefix, like libpandatiff.
-                location = LocateLibrary("panda" + libname, lpath, prefer_static=True)
+            for libname in (libname, f'lib{libname}'):
+                location = LocateLibrary(libname, lpath, prefer_static=True)
                 if location is not None:
+                    # If it's a .so or .dylib we may have changed it and copied it to the built/lib dir.
                     if location.endswith('.so') or location.endswith('.dylib'):
                         location = os.path.join(GetOutputDir(), "lib", os.path.basename(location))
                     LibName(target_pkg, location)
                 else:
-                    print(GetColor("cyan") + "Couldn't find library lib" + libname + " in thirdparty directory " + thirdparty_dir + GetColor())
+                    # This is for backward compatibility - in the thirdparty dir,
+                    # we kept some libs with "panda" prefix, like libpandatiff.
+                    location = LocateLibrary("panda" + libname, lpath, prefer_static=True)
+                    if location is not None:
+                        if location.endswith('.so') or location.endswith('.dylib'):
+                            location = os.path.join(GetOutputDir(), "lib", os.path.basename(location))
+                        LibName(target_pkg, location)
+                    else:
+                        print(GetColor("cyan") + "Couldn't find library lib" + libname + " in thirdparty directory " + thirdparty_dir + GetColor())
 
         for d, v in defs.values():
             DefSymbol(target_pkg, d, v)
