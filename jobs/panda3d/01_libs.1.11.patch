diff --git a/makepanda/makepanda.py b/makepanda/makepanda.py
index 1cecc7dbe8..a4214b3b72 100755
--- a/makepanda/makepanda.py
+++ b/makepanda/makepanda.py
@@ -758,11 +758,7 @@ if (COMPILER == "MSVC"):
         else:
             LibName("FMODEX",   GetThirdpartyDir() + "fmodex/lib/fmodex_vc.lib")
     if (PkgSkip("VORBIS")==0):
-        for lib in ('ogg', 'vorbis', 'vorbisfile'):
-            path = GetThirdpartyDir() + "vorbis/lib/lib{0}_static.lib".format(lib)
-            if not os.path.isfile(path):
-                path = GetThirdpartyDir() + "vorbis/lib/{0}.lib".format(lib)
-            LibName("VORBIS", path)
+        SmartPkgEnable("VORBIS", None, ("vorbisfile_static", "vorbis_static", "ogg_static"), ("ogg/ogg.h", "vorbis/vorbisfile.h"))
     if (PkgSkip("OPUS")==0):
         IncDirectory("OPUS", GetThirdpartyDir() + "opus/include/opus")
         for lib in ('ogg', 'opus', 'opusfile'):
@@ -807,13 +803,13 @@ if (COMPILER == "MSVC"):
             LibName("SPEEDTREE",  "glu32.lib")
         IncDirectory("SPEEDTREE", SDK["SPEEDTREE"] + "/Include")
     if (PkgSkip("BULLET")==0):
-        suffix = '.lib'
-        if GetTargetArch() == 'x64' and os.path.isfile(GetThirdpartyDir() + "bullet/lib/BulletCollision_x64.lib"):
-            suffix = '_x64.lib'
-        LibName("BULLET", GetThirdpartyDir() + "bullet/lib/LinearMath" + suffix)
-        LibName("BULLET", GetThirdpartyDir() + "bullet/lib/BulletCollision" + suffix)
-        LibName("BULLET", GetThirdpartyDir() + "bullet/lib/BulletDynamics" + suffix)
-        LibName("BULLET", GetThirdpartyDir() + "bullet/lib/BulletSoftBody" + suffix)
+        SmartPkgEnable("BULLET", None, (
+            "BulletSoftBody", "BulletDynamics", "BulletCollision", "LinearMath",
+            "Bullet3Common", "Bullet3Collision", "Bullet3Dynamics",
+            "Bullet3Geometry", "Bullet3OpenCL_clew",
+        ), (
+            "bullet", "bullet/btBulletDynamicsCommon.h",
+        ))
 
 if (COMPILER=="GCC"):
     if GetTarget() != "darwin":
@@ -980,12 +976,6 @@ if (COMPILER=="GCC"):
             LibName("OPENEXR", "-Wl,--exclude-libs,libOpenEXRCore.a")
             LibName("OPENEXR", "-Wl,--exclude-libs,libOpenEXRUtil.a")
 
-        if not PkgSkip("VORBIS"):
-            LibName("VORBIS", "-Wl,--exclude-libs,libogg.a")
-            LibName("VORBIS", "-Wl,--exclude-libs,libvorbis.a")
-            LibName("VORBIS", "-Wl,--exclude-libs,libvorbisenc.a")
-            LibName("VORBIS", "-Wl,--exclude-libs,libvorbisfile.a")
-
         if not PkgSkip("OPUS"):
             LibName("OPUS", "-Wl,--exclude-libs,libogg.a")
             LibName("OPUS", "-Wl,--exclude-libs,libopus.a")
diff --git a/makepanda/makepandacore.py b/makepanda/makepandacore.py
index 55cb8dfa2f..31d48c0d28 100644
--- a/makepanda/makepandacore.py
+++ b/makepanda/makepandacore.py
@@ -544,6 +544,10 @@ def GetBison():
     if BISON is not None:
         return BISON
 
+    if "BISON" in os.environ:
+        BISON = os.environ["BISON"]
+        return BISON
+
     # We now require a newer version of Bison than the one we previously
     # shipped in the win-util dir.  The new version has a 'data'
     # subdirectory, so check for that.
@@ -1694,6 +1698,8 @@ def LocateLibrary(lib, lpath=[], prefer_static=False):
                 return os.path.join(dir, lib + '.lib')
         elif target == 'darwin' and os.path.isfile(os.path.join(dir, 'lib%s.dylib' % lib)):
             return os.path.join(dir, 'lib%s.dylib' % lib)
+        elif target == 'windows' and os.path.isfile(os.path.join(dir, '%s.lib' % lib)):
+            return os.path.join(dir, '%s.lib' % lib)
         elif target != 'darwin' and os.path.isfile(os.path.join(dir, 'lib%s.so' % lib)):
             return os.path.join(dir, 'lib%s.so' % lib)
         elif os.path.isfile(os.path.join(dir, 'lib%s.a' % lib)):
@@ -1881,29 +1887,33 @@ def SmartPkgEnable(pkg, pkgconfig = None, libs = None, incs = None, defs = None,
             if l.startswith("lib"):
                 libname = l[3:]
 
-            if custom_loc:
-                # Try searching in the package's LibDirectories.
-                lpath = [dir for ppkg, dir in LIBDIRECTORIES if pkg == ppkg]
-                location = LocateLibrary(libname, lpath)
-                if location is not None:
-                    LibName(target_pkg, location)
-                else:
-                    have_pkg = False
-                    print(GetColor("cyan") + "Couldn't find library lib" + libname + GetColor())
+            for libname in (libname, f'lib{libname}'):
+                if custom_loc:
+                    # Try searching in the package's LibDirectories.
+                    lpath = [dir for ppkg, dir in LIBDIRECTORIES if pkg == ppkg]
+                    location = LocateLibrary(libname, lpath)
+                    if location is not None:
+                        LibName(target_pkg, location)
+                        print(GetColor("cyan") + "Found library " + location + GetColor())
+                        have_pkg = True
+                        break
+                    else:
+                        have_pkg = False
+                        print(GetColor("cyan") + "Couldn't find library lib" + libname + GetColor())
 
-            elif SystemLibraryExists(libname):
-                # It exists in a system library directory.
-                LibName(target_pkg, "-l" + libname)
-            else:
-                # Try searching in the package's LibDirectories.
-                lpath = [dir for ppkg, dir in LIBDIRECTORIES if pkg == ppkg or ppkg == "ALWAYS"]
-                location = LocateLibrary(libname, lpath)
-                if location is not None:
+                elif SystemLibraryExists(libname):
+                    # It exists in a system library directory.
                     LibName(target_pkg, "-l" + libname)
                 else:
-                    have_pkg = False
-                    if VERBOSE or custom_loc:
-                        print(GetColor("cyan") + "Couldn't find library lib" + libname + GetColor())
+                    # Try searching in the package's LibDirectories.
+                    lpath = [dir for ppkg, dir in LIBDIRECTORIES if pkg == ppkg or ppkg == "ALWAYS"]
+                    location = LocateLibrary(libname, lpath)
+                    if location is not None:
+                        LibName(target_pkg, "-l" + libname)
+                    else:
+                        have_pkg = False
+                        if VERBOSE or custom_loc:
+                            print(GetColor("cyan") + "Couldn't find library lib" + libname + GetColor())
 
         # Determine which include directories to look in.
         incdirs = []
